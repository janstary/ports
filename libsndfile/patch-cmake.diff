--- CMakeLists.txt.orig	2022-03-27 13:48:57.000000000 +0200
+++ CMakeLists.txt	2022-04-27 16:57:49.000000000 +0200
@@ -1,20 +1,5 @@
 cmake_minimum_required (VERSION 3.1..3.18)
 
-# MSVC runtime library flags are selected by an abstraction, CMake >= 3.15
-# This policy still need to be set even with cmake_minimum_required() command above.
-if (POLICY CMP0091)
-	if ((DEFINED ENABLE_STATIC_RUNTIME) AND (DEFINED CMAKE_MSVC_RUNTIME_LIBRARY))
-		message (FATAL_ERROR "Both ENABLE_STATIC_RUNTIME and CMAKE_MSVC_RUNTIME_LIBRARY are set.")
-		return ()
-	endif ()
-
-	if (DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)
-		cmake_policy (SET CMP0091 NEW)
-	else ()
-		cmake_policy (SET CMP0091 OLD)
-	endif ()
-endif ()
-
 option (ENABLE_EXTERNAL_LIBS "Enable FLAC, Vorbis, and Opus codecs" ON)
 if (ENABLE_EXTERNAL_LIBS)
 	list (APPEND VCPKG_MANIFEST_FEATURES "external-libs")
@@ -56,7 +41,8 @@ set (CPACK_PACKAGE_VERSION_FULL "${PROJE
 # System-wide includes
 #
 
-include (GNUInstallDirs)
+include(GNUInstallDirs)
+set (CMAKE_INSTALL_MANDIR "man")
 include (FeatureSummary)
 include (CMakeDependentOption)
 include (CTest)
@@ -66,14 +52,14 @@ include (CheckCCompilerFlag)
 # Options
 #
 
-option (BUILD_SHARED_LIBS "Build shared libraries" OFF)
+option (BUILD_SHARED_LIBS "Build shared libraries" ON)
 if (BUILD_SHARED_LIBS AND BUILD_TESTING)
 	set (BUILD_TESTING OFF)
 	message ("Build testing required static libraries. To prevent build errors BUILD_TESTING disabled.")
 endif ()
 option (BUILD_PROGRAMS "Build programs" ON)
 option (BUILD_EXAMPLES "Build examples" ON)
-option (ENABLE_CPACK "Enable CPack support" ON)
+option (ENABLE_CPACK "Enable CPack support" OFF)
 option (ENABLE_BOW_DOCS "Enable black-on-white html docs" OFF)
 if (MSVC AND (DEFINED ENABLE_STATIC_RUNTIME))
 	option (ENABLE_STATIC_RUNTIME "Enable static runtime" ${ENABLE_STATIC_RUNTIME})
@@ -126,8 +112,6 @@ endif ()
 
 set (HAVE_EXTERNAL_XIPH_LIBS ${ENABLE_EXTERNAL_LIBS})
 set (HAVE_SQLITE3 ${BUILD_REGTEST})
-set (HAVE_ALSA_ASOUNDLIB_H ${ALSA_FOUND})
-set (HAVE_SNDIO_H ${SNDIO_FOUND})
 
 set (ENABLE_EXPERIMENTAL_CODE ${ENABLE_EXPERIMENTAL})
 set (HAVE_MPEG ${ENABLE_MPEG})
@@ -577,16 +561,6 @@ if (BUILD_PROGRAMS)
 		)
 	target_link_libraries (sndfile-play PRIVATE $<$<BOOL:${LIBM_REQUIRED}>:m>)
 	target_link_libraries (sndfile-play PRIVATE sndfile)
-	if (WIN32)
-		target_link_libraries(sndfile-play PRIVATE winmm)
-	# Maybe ALSA & Sndio are present in BeOS. They are not required
-	# so skip them anyway.
-	elseif ((NOT BEOS) AND ALSA_FOUND)
-		target_include_directories (sndfile-play PRIVATE ${ALSA_INCLUDE_DIRS})
-		target_link_libraries (sndfile-play PRIVATE ${ALSA_LIBRARIES})
-	elseif (CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
-		target_link_libraries (sndfile-play PRIVATE Sndio::Sndio)
-	endif ()
 
 # sndfile-convert
 
@@ -749,11 +723,6 @@ if (BUILD_EXAMPLES)
 	add_executable (generate examples/generate.c)
 	target_link_libraries (generate PRIVATE sndfile)
 
-# sndfilehandle
-
-	add_executable (sndfilehandle examples/sndfilehandle.cc)
-	target_link_libraries (sndfilehandle PUBLIC sndfile)
-
 	set (SNDFILE_EXAMPLE_TARGETS
 		sndfile-to-text
 		sndfile-loopify
@@ -761,7 +730,6 @@ if (BUILD_EXAMPLES)
 		sfprocess
 		list_formats
 		generate
-		sndfilehandle
 		)
 
 	set_target_properties(${SNDFILE_EXAMPLE_TARGETS} PROPERTIES FOLDER Examples)
@@ -1128,17 +1096,6 @@ if (BUILD_TESTING)
 #		add_test (win32_ordinal_test win32_ordinal_test)
 #	endif ()
 
-	### cpp_test
-
-	add_executable (cpp_test tests/cpp_test.cc)
-	target_link_libraries (cpp_test
-		PRIVATE
-			sndfile
-			test_utils
-			$<$<BOOL:${LIBM_REQUIRED}>:m>
-		)
-	add_test (cpp_test cpp_test)
-
 	### external_libs_test
 
 	add_executable (external_libs_test tests/external_libs_test.c)
@@ -1564,7 +1521,6 @@ if (BUILD_TESTING)
 		headerless_test
 		rdwr_test
 		locale_test
-		cpp_test
 		external_libs_test
 		format_check_test
 		channel_test
